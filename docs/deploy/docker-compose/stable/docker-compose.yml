version: "3.8"
# This docker composition can be used as a quick start. Docker images will be fetch from docker hub's
# couldnativegeoserver organization. The config-service is set up to use a public remote git repository. At start up, it'll
# clone it to the service instance container's filesystem and serve application configurations from there.
#
volumes:
  postgresql_config_data: # volume for postgresql data, used to store the geoserver config through jdbcconfig
  rabbitmq_data: # volume for rabbitmq data, so it doesn't create an anonymous one on each container
  
networks:
  gs-cloud-network:
    driver: bridge
        
services:
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - gs-cloud-network
    ports:
      - "5672:5672"
      - "15672:15672"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G

  database:
    image: cloudnativegeoserver/gs-cloud-database:0.2.0
    environment:
      POSTGRES_DB: "geoserver_config"
      POSTGRES_USER: "geoserver"
      POSTGRES_PASSWORD: "geo5erver"
    ports:
      - 5432:5432
    networks:
      - gs-cloud-network
    volumes:
      - postgresql_config_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G

  # Eureka service discovery. This is a Discovery First Bootstrap configuration.
  # The discovery service is the only fixed entry point.
  # Browse to http://localhost:8761 to check all services are registered.
  # Run docker-compose -f docker-compose.yml -f docker-compose-discovery-ha.yml to run extra discovery service instances for HA
  discovery:
    image: cloudnativegeoserver/gs-cloud-discovery-service:0.2.0
    environment:
      SERVER_PORT: 8761
      EUREKA_INSTANCE_HOSTNAME: discovery
      JAVA_OPTS: -XX:MaxRAMPercentage=80 -XX:MaxRAM=512M
    ports:
      - 8761:8761 # for development, so services can be run from localhost and find the discovery service running on docker
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "-m", "1", "http://localhost:8761/actuator/health"]
      interval: 1s
      timeout: 1s
      retries: 15
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 512M

  # Spring Cloud Config service, provides centralized configuration to all
  # microservices. Being a Discovery First Bootstrap configuration, it'll
  # register itself with the Eureka discovery service and can be scaled
  config:
    image: cloudnativegeoserver/gs-cloud-config-service:0.2.0
    depends_on:
      - discovery
    environment:
      EUREKA_SERVER_URL: http://discovery:8761/eureka
      RABBITMQ_HOST: rabbitmq
      JAVA_OPTS: -XX:MaxRAMPercentage=80 -XX:MaxRAM=512M
      management_endpoint_health_show-details: always # never|always|when-authorized
      # Either 'git' or 'native'. Use the default sample git repository to download the services configuration from
      # If 'git', BEWARE config server will look for a branch called "master", and github changed the default branch name to "main"
      # For more information, see https://cloud.spring.io/spring-cloud-config/multi/multi__spring_cloud_config_server.html#_git_backend
      SPRING_PROFILES_ACTIVE: git
      # 'git' profile config
      CONFIG_GIT_URI: https://github.com/groldan/geoserver-microservices-config
      CONFIG_GIT_BASEDIR: /opt/app/git_config
      # 'native' profile config
      CONFIG_NATIVE_PATH: /opt/app/config
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "-m", "1", "http://localhost:8080/actuator/health"]
      interval: 1s
      timeout: 1s
      retries: 30
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 512M
    # wait until discovery service is available
    command: dockerize -wait http://discovery:8761/actuator/health --timeout 15s java -XX:MaxRAMPercentage=80 -XX:MaxRAM=512M -jar /opt/app/config-service.jar

  # Application facade, provides a single entry point routing to all
  # microservices (e.g. http://localhost:9090/geoserver/wms, http://localhost:9090/geoserver/wfs, etc)
  gateway:
    image: cloudnativegeoserver/gs-cloud-gateway:0.2.0
    depends_on:
      - discovery
      - config
    environment:
      EUREKA_SERVER_URL: http://discovery:8761/eureka
      JAVA_OPTS: -XX:MaxRAMPercentage=80 -XX:MaxRAM=512M
    ports:
      - 9090:8080
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 512M
    # wait until config service is available
    command: dockerize -wait http://config:8080/gateway-service/default --timeout 120s java -XX:MaxRAMPercentage=80 -XX:MaxRAM=512M -jar /opt/app/gateway-service.jar

  # catalog microservice, provides a unified catalog backend to all services
  catalog:
    image: cloudnativegeoserver/gs-cloud-catalog:0.2.0
    depends_on:
      - discovery
      - config
      - database
      - rabbitmq
    environment:
      JAVA_OPTS: -XX:MaxRAMPercentage=80 -XX:MaxRAM=512M
      EUREKA_SERVER_URL: http://discovery:8761/eureka
      RABBITMQ_HOST: rabbitmq
      JDBCCONFIG_URL: "jdbc:postgresql://database:5432/geoserver_config"
      JDBCCONFIG_USERNAME: "geoserver"
      JDBCCONFIG_PASSWORD: "geo5erver"
      spring_cloud_config_fail-fast: "false"
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 512M
    command: dockerize -wait http://config:8080/catalog-service/default --timeout 120s java -XX:MaxRAMPercentage=80 -XX:MaxRAM=512M -jar /opt/app/catalog-service.jar

  # WFS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wfs=5)
  wfs:
    image: cloudnativegeoserver/gs-cloud-wfs:0.2.0
    depends_on:
      - rabbitmq
      - catalog
    environment:
      JAVA_OPTS: -XX:MaxRAMPercentage=80 -XX:MaxRAM=512M
      EUREKA_SERVER_URL: http://discovery:8761/eureka
      RABBITMQ_HOST: rabbitmq
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 512M
    command: dockerize --timeout 120s -wait http://config:8080/wfs-service/default -wait http://catalog:8080/api/v1/catalog/workspaces java -XX:MaxRAMPercentage=80 -XX:MaxRAM=512M -jar /opt/app/wfs-service.jar

  # WMS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wms=5)
  wms:
    image: cloudnativegeoserver/gs-cloud-wms:0.2.0
    depends_on:
      - rabbitmq
      - catalog
    environment:
      JAVA_OPTS: -XX:MaxRAMPercentage=80 -XX:MaxRAM=1G
      EUREKA_SERVER_URL: http://discovery:8761/eureka
      RABBITMQ_HOST: rabbitmq
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
    # wait until config service is available
    command: dockerize -wait http://config:8080/wms-service/default -wait http://catalog:8080/api/v1/catalog/workspaces --timeout 120s java -XX:MaxRAMPercentage=80 -XX:MaxRAM=1G -jar /opt/app/wms-service.jar

  # WCS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wcs=5)
  wcs:
    image: cloudnativegeoserver/gs-cloud-wcs:0.2.0
    depends_on:
      - rabbitmq
      - catalog
    environment:
      JAVA_OPTS: -XX:MaxRAMPercentage=80 -XX:MaxRAM=1G
      EUREKA_SERVER_URL: http://discovery:8761/eureka
      RABBITMQ_HOST: rabbitmq
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
    # wait until config service is available
    command: dockerize -wait http://config:8080/wcs-service/default -wait http://catalog:8080/api/v1/catalog/workspaces --timeout 120s java -XX:MaxRAMPercentage=80 -XX:MaxRAM=1G -jar /opt/app/wcs-service.jar

  # REST config microservice, port dynamically allocated to allow scaling (e.g docker-compose scale rest=5)
  rest:
    image: cloudnativegeoserver/gs-cloud-restconfig-v1:0.2.0
    depends_on:
      - rabbitmq
      - catalog
    environment:
      JAVA_OPTS: -XX:MaxRAMPercentage=80 -XX:MaxRAM=512M
      EUREKA_SERVER_URL: http://discovery:8761/eureka
      RABBITMQ_HOST: rabbitmq
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1G
    # wait until config service is available
    command: dockerize -wait http://config:8080/restconfig-service/default -wait http://catalog:8080/api/v1/catalog/workspaces --timeout 120s java -XX:MaxRAMPercentage=80 -XX:MaxRAM=512M -jar /opt/app/restconfig-service.jar

  # WEB UI microservice
  webui:
    image: cloudnativegeoserver/gs-cloud-web-ui:0.2.0
    depends_on:
      - rabbitmq
      - catalog
    environment:
      JAVA_OPTS: -XX:MaxRAMPercentage=80 -XX:MaxRAM=1G
      EUREKA_SERVER_URL: http://discovery:8761/eureka
      RABBITMQ_HOST: rabbitmq
    networks:
      - gs-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
    # wait until config service is available
    command: dockerize -wait http://config:8080/web-ui/default -wait http://catalog:8080/api/v1/catalog/workspaces --timeout 120s java -XX:MaxRAMPercentage=80 -XX:MaxRAM=1G -jar /opt/app/web-ui-service.jar
    
